{"version":3,"sources":["config.js","BattlesByLocation/BattlesByLocationAPI.js","BattleInfoTable/BattleInfoTable.js","BattlesByLocation/BattlesByLocation.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","allLocations","a","axios","get","res","data","battleDetailsByLocation","location","BattleInfoTable","console","log","headings","length","Object","keys","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","map","head","index","TableCell","TableBody","battle","align","name","BattlesByLocation","props","locationRef","useRef","useState","locations","setLocations","battleData","setBattleData","getData","handleClick","event","current","value","useEffect","Container","maxWidth","className","Typography","variant","Box","fontFamily","fontWeight","Autocomplete","fullWidth","id","options","getOptionLabel","option","renderInput","params","TextField","label","inputRef","Button","color","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2GAGAA,EAAOC,QAAU,CACb,IAAM,GAAN,OAJY,mBAIZ,YAHS,U,0LCGEC,I,2EAAf,8BAAAC,EAAA,sEACsBC,IAAMC,IAAN,wBADtB,cACUC,EADV,OAEYC,EAASD,EAATC,KAFZ,kBAGWA,GAHX,4C,+BAOeC,E,8EAAf,WAAuCC,GAAvC,iBAAAN,EAAA,sEACsBC,IAAMC,IAAN,2BAA8BI,IADpD,cACUH,EADV,OAEYC,EAASD,EAATC,KAFZ,kBAGWA,GAHX,4C,yFC8BeG,EAhCS,SAAC,GAAc,IAAZH,EAAW,EAAXA,KACvBI,QAAQC,IAAIL,GAEZ,IAAMM,EAAWN,EAAKO,OAAS,EAAIC,OAAOC,KAAKT,EAAK,IAAM,GAC1D,OACI,cAACU,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACA,eAACC,EAAA,EAAD,CAAOC,aAAW,eAAlB,UACE,cAACC,EAAA,EAAD,UAEE,cAACC,EAAA,EAAD,UACKV,EAASW,KAAI,SAACC,EAAMC,GAAP,OACV,cAACC,EAAA,EAAD,UAAwBF,GAARC,UAK1B,cAACE,EAAA,EAAD,UAEGrB,EAAKiB,KAAI,SAACK,GAAD,OACR,cAACN,EAAA,EAAD,UAEGV,EAASW,KAAI,SAACC,EAAMC,GAAP,OACZ,cAACC,EAAA,EAAD,CAAWG,MAAM,QAAjB,SAAsCD,EAAOJ,IAAfC,OAHnBG,EAAOE,iB,sDCiErBC,G,MAlFW,SAACC,GAEvB,IAAMC,EAAcC,iBAAO,IAFM,EAICC,mBAAS,IAJV,mBAI1BC,EAJ0B,KAIfC,EAJe,OAQGF,mBAAS,IARZ,mBAQ1BG,EAR0B,KAQdC,EARc,KAW3BC,EAAO,uCAAG,sBAAAtC,EAAA,kEAGZmC,EAHY,SAGOpC,IAHP,6EAAH,qDAOPwC,EAAW,uCAAG,WAAOC,GAAP,SAAAxC,EAAA,kEAIhBqC,EAJgB,SAIIhC,EAAwB0B,EAAYU,QAAQC,OAJhD,6EAAH,sDAcjB,OAJAC,qBAAU,WACNL,MACD,IAGC,gCACI,eAACM,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,YAAnC,UAEI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKjC,UAAU,MAAnC,SACI,cAACkC,EAAA,EAAD,CAAKC,WAAW,YAAYC,WAAY,IAAxC,wDAKJ,sBAAKL,UAAU,kBAAf,UAEI,cAACM,EAAA,EAAD,CACIC,WAAS,EACTC,GAAG,iBAEHC,QAASrB,EAETsB,eAAgB,SAAAC,GAAM,OAAIA,GAC1BC,YACI,SAACC,GAAD,OACI,cAACC,EAAA,EAAD,2BACQD,GADR,IAEIE,MAAM,YACNb,QAAQ,WAERc,SAAU/B,EACVsB,WAAS,QAKzB,cAACU,EAAA,EAAD,CAAQjB,UAAU,SAASE,QAAQ,YAAYgB,MAAM,UAAUC,QAAS1B,EAAxE,0BAUR,cAACK,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,YAAnC,SACI,cAAC,EAAD,CAAiB1C,KAAMgC,WC5ExB8B,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b4bd3527.chunk.js","sourcesContent":["const address = 'http://localhost';\nconst port = '8000';\n\nmodule.exports = {\n    'url': `${address}:${port}`\n}","import axios from 'axios';\nimport { url } from '../config';\n\n// all the locations\nasync function allLocations() {\n    const res = await axios.get(`/list?field=location`)\n    const { data } = res;\n    return data;\n}\n\n// all the battle by location\nasync function battleDetailsByLocation(location) {\n    const res = await axios.get(`/search?location=${location}`)\n    const { data } = res;\n    return data;\n}\n\nexport {\n    allLocations,\n    battleDetailsByLocation\n};","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst BattleInfoTable = ({ data }) => {\n    console.log(data);\n    // create heading using the keys of the object\n    const headings = data.length > 0 ? Object.keys(data[0]) : [];\n    return (\n        <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n              {/* make the heading row using the \"heading\" keys */}\n            <TableRow>\n                {headings.map((head, index) => (\n                    <TableCell key={index}>{head}</TableCell>\n                ))}\n              \n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {/* map every battle in data*/}\n            {data.map((battle) => (\n              <TableRow key={battle.name}>\n                {/* for every key in battle assign it a cell */}\n                {headings.map((head, index) => (\n                  <TableCell align=\"right\" key={index}>{battle[head]}</TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n}\n\nexport default BattleInfoTable","import React, { useState, useEffect, useRef } from 'react';\nimport { allLocations, battleDetailsByLocation } from './BattlesByLocationAPI';\nimport BattleInfoTable from '../BattleInfoTable/BattleInfoTable';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport './BattlesByLocation.css';\n\nconst BattlesByLocation = (props) => {\n    // ref for search bar\n    const locationRef = useRef('');\n    // list of locations used for suggestions\n    const [locations, setLocations] = useState([]);\n    // list of all the battles at the selected location\n    // passed to BattleInfoTable component to populate\n    // a table using the data.\n    const [battleData, setBattleData] = useState([]);\n\n    // async function for setLocations\n    const getData = async () => {\n        // allLocations is api endpoint which\n        // return all the possible locations\n        setLocations(await allLocations());\n    }\n\n    // runs when you click on submit button    \n    const handleClick = async (event) => {\n        // sends the location to this api endpoint which returns list of battles\n        // that have taken place at the current location\n        // so, just await and set the battle data to the returned value\n        setBattleData(await battleDetailsByLocation(locationRef.current.value));\n    }\n\n    // useEffect to do getData\n    // when the component first renders\n    // works just like componentdidmount\n    useEffect(() => {\n        getData();\n    }, [])\n\n    return (\n        <div>\n            <Container maxWidth=\"md\" className=\"container\">\n                \n                <Typography variant=\"h2\" component=\"div\">\n                    <Box fontFamily=\"Monospace\" fontWeight={600}>\n                        Details of battles based on the location\n                    </Box>\n                </Typography>\n                \n                <div className=\"inner-container\">\n                    {/* material ui autocomplete with textbox to make suggestions */}\n                    <Autocomplete\n                        fullWidth\n                        id=\"combo-box-demo\"\n                        // provide all the options\n                        options={locations}\n                        // provide the option labels\n                        getOptionLabel={option => option}\n                        renderInput={\n                            (params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Combo box\"\n                                    variant=\"outlined\"\n                                    // pass ref to locationRef\n                                    inputRef={locationRef}\n                                    fullWidth\n                                />\n                        )}\n                    />\n                    \n                    <Button className=\"button\" variant=\"contained\" color=\"primary\" onClick={handleClick}>\n                        Submit\n                    </Button>\n\n                </div>\n            </Container>\n            {/* pass battleData to make the table\n                if the battleData is empty an empty table is\n                rendered\n             */}\n            <Container maxWidth='md' className='container'>\n                <BattleInfoTable data={battleData}/>\n            </Container>\n\n        </div>\n    )\n}\n\nexport default BattlesByLocation;","import BattlesByLocation from './BattlesByLocation/BattlesByLocation';\n\nfunction App() {\n  return (\n    <div>\n      <BattlesByLocation />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}